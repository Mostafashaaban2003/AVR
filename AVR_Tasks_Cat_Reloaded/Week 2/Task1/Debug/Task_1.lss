
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000045c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006c3  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define CLR_BIT(VAR, BIT_NO)	(VAR&= ~(1<<BIT_NO))
#define TOGGLE_BIT(VAR, BIT_NO)		(VAR^=(1<<BIT_NO))
#define GET_BIT(VAR, BIT_NO)	((VAR>>BIT_NO) & 0x01)

int main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	 u8 swState = 0;
  76:	19 82       	std	Y+1, r1	; 0x01
	// sws is input
	DDRB = 0;
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	10 82       	st	Z, r1
	DDRA = 0;
  7e:	ea e3       	ldi	r30, 0x3A	; 58
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	10 82       	st	Z, r1
	// sws is pulled up
	SET_BIT(PORTB, 0);
  84:	a8 e3       	ldi	r26, 0x38	; 56
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e8 e3       	ldi	r30, 0x38	; 56
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	8c 93       	st	X, r24
	SET_BIT(PORTB, 1);
  92:	a8 e3       	ldi	r26, 0x38	; 56
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e8 e3       	ldi	r30, 0x38	; 56
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8c 93       	st	X, r24
	SET_BIT(PORTB, 2);
  a0:	a8 e3       	ldi	r26, 0x38	; 56
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e8 e3       	ldi	r30, 0x38	; 56
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	8c 93       	st	X, r24

	// leds is output ,low at start
	SET_BIT(DDRA, 0);
  ae:	aa e3       	ldi	r26, 0x3A	; 58
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ea e3       	ldi	r30, 0x3A	; 58
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	8c 93       	st	X, r24
	SET_BIT(DDRA, 1);
  bc:	aa e3       	ldi	r26, 0x3A	; 58
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	ea e3       	ldi	r30, 0x3A	; 58
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8c 93       	st	X, r24

	// to make leds off
	CLR_BIT(PORTA, 0);
  ca:	ab e3       	ldi	r26, 0x3B	; 59
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	eb e3       	ldi	r30, 0x3B	; 59
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	8c 93       	st	X, r24
	CLR_BIT(PORTA, 1);
  d8:	ab e3       	ldi	r26, 0x3B	; 59
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	eb e3       	ldi	r30, 0x3B	; 59
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	8c 93       	st	X, r24


	while(1)
	{
		// to make the results logical
			swState = ~PINB;
  e6:	e6 e3       	ldi	r30, 0x36	; 54
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 95       	com	r24
  ee:	89 83       	std	Y+1, r24	; 0x01

		if(GET_BIT(swState, 0)) // switch 1 is on
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	90 70       	andi	r25, 0x00	; 0
  fa:	88 23       	and	r24, r24
  fc:	71 f0       	breq	.+28     	; 0x11a <main+0xae>
		{
			SET_BIT(PORTA, 0); // red led is on
  fe:	ab e3       	ldi	r26, 0x3B	; 59
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	eb e3       	ldi	r30, 0x3B	; 59
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	8c 93       	st	X, r24
			CLR_BIT(PORTA, 1); // green led is off
 10c:	ab e3       	ldi	r26, 0x3B	; 59
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	eb e3       	ldi	r30, 0x3B	; 59
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	8c 93       	st	X, r24
		}

		if(GET_BIT(swState, 1)) // switch 2 is on
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	86 95       	lsr	r24
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	81 70       	andi	r24, 0x01	; 1
 124:	90 70       	andi	r25, 0x00	; 0
 126:	88 23       	and	r24, r24
 128:	71 f0       	breq	.+28     	; 0x146 <main+0xda>
		{
			SET_BIT(PORTA, 1); // green led is on
 12a:	ab e3       	ldi	r26, 0x3B	; 59
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	eb e3       	ldi	r30, 0x3B	; 59
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	8c 93       	st	X, r24
			CLR_BIT(PORTA, 0); // red led is off
 138:	ab e3       	ldi	r26, 0x3B	; 59
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	eb e3       	ldi	r30, 0x3B	; 59
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	8c 93       	st	X, r24
		}

		if(GET_BIT(swState, 2)) // switch 3 is on
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	86 95       	lsr	r24
 14a:	86 95       	lsr	r24
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	81 70       	andi	r24, 0x01	; 1
 152:	90 70       	andi	r25, 0x00	; 0
 154:	88 23       	and	r24, r24
 156:	79 f0       	breq	.+30     	; 0x176 <main+0x10a>
		{
			SET_BIT(PORTA, 0); // red led is on
 158:	ab e3       	ldi	r26, 0x3B	; 59
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	eb e3       	ldi	r30, 0x3B	; 59
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	81 60       	ori	r24, 0x01	; 1
 164:	8c 93       	st	X, r24
			SET_BIT(PORTA, 1); // green led is on
 166:	ab e3       	ldi	r26, 0x3B	; 59
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	eb e3       	ldi	r30, 0x3B	; 59
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	82 60       	ori	r24, 0x02	; 2
 172:	8c 93       	st	X, r24
 174:	b8 cf       	rjmp	.-144    	; 0xe6 <main+0x7a>
		}

		else // all switches is off
		{
			CLR_BIT(PORTA, 0); // red led is off
 176:	ab e3       	ldi	r26, 0x3B	; 59
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	eb e3       	ldi	r30, 0x3B	; 59
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	8c 93       	st	X, r24
			CLR_BIT(PORTA, 1); // green led is off
 184:	ab e3       	ldi	r26, 0x3B	; 59
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	eb e3       	ldi	r30, 0x3B	; 59
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	8c 93       	st	X, r24
 192:	a9 cf       	rjmp	.-174    	; 0xe6 <main+0x7a>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
