
Week2_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000003fc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006d1  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define CLR_BIT(VAR, BIT_NO)	(VAR&= ~(1<<BIT_NO))
#define TOGGLE_BIT(VAR, BIT_NO)		(VAR^=(1<<BIT_NO))
#define GET_BIT(VAR, BIT_NO)	((VAR>>BIT_NO) & 0x01)

int main()
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	u8 SegChde[] = {0X3F, 0X06, 0X5B,
						0X4F, 0X66, 0X6D,
						0X7D, 0X07, 0X7F,
						0X6F};
  96:	ce 01       	movw	r24, r28
  98:	02 96       	adiw	r24, 0x02	; 2
  9a:	9d 87       	std	Y+13, r25	; 0x0d
  9c:	8c 87       	std	Y+12, r24	; 0x0c
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	ff 87       	std	Y+15, r31	; 0x0f
  a4:	ee 87       	std	Y+14, r30	; 0x0e
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	f8 8b       	std	Y+16, r31	; 0x10
  aa:	ee 85       	ldd	r30, Y+14	; 0x0e
  ac:	ff 85       	ldd	r31, Y+15	; 0x0f
  ae:	00 80       	ld	r0, Z
  b0:	8e 85       	ldd	r24, Y+14	; 0x0e
  b2:	9f 85       	ldd	r25, Y+15	; 0x0f
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	9f 87       	std	Y+15, r25	; 0x0f
  b8:	8e 87       	std	Y+14, r24	; 0x0e
  ba:	ec 85       	ldd	r30, Y+12	; 0x0c
  bc:	fd 85       	ldd	r31, Y+13	; 0x0d
  be:	00 82       	st	Z, r0
  c0:	8c 85       	ldd	r24, Y+12	; 0x0c
  c2:	9d 85       	ldd	r25, Y+13	; 0x0d
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9d 87       	std	Y+13, r25	; 0x0d
  c8:	8c 87       	std	Y+12, r24	; 0x0c
  ca:	98 89       	ldd	r25, Y+16	; 0x10
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	98 8b       	std	Y+16, r25	; 0x10
  d0:	e8 89       	ldd	r30, Y+16	; 0x10
  d2:	ee 23       	and	r30, r30
  d4:	51 f7       	brne	.-44     	; 0xaa <main+0x28>
	 u8 counter = 0;
  d6:	19 82       	std	Y+1, r1	; 0x01
	// sws is input
	DDRA = 0;
  d8:	ea e3       	ldi	r30, 0x3A	; 58
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1

	// sws is pulled up
	SET_BIT(PORTA, 0);
  de:	ab e3       	ldi	r26, 0x3B	; 59
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	eb e3       	ldi	r30, 0x3B	; 59
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	8c 93       	st	X, r24
	SET_BIT(PORTA, 1);
  ec:	ab e3       	ldi	r26, 0x3B	; 59
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	eb e3       	ldi	r30, 0x3B	; 59
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	8c 93       	st	X, r24

	// 7SEG is output ,low at start
	DDRB = 0XFF;
  fa:	e7 e3       	ldi	r30, 0x37	; 55
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 83       	st	Z, r24

	// start
	PORTB = SegChde[0];
 102:	e8 e3       	ldi	r30, 0x38	; 56
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	8a 81       	ldd	r24, Y+2	; 0x02
 108:	80 83       	st	Z, r24



	while(1)
	{
			if(GET_BIT(~PINA, 0) && counter < 9) // switch 1 is on
 10a:	e9 e3       	ldi	r30, 0x39	; 57
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	81 70       	andi	r24, 0x01	; 1
 116:	90 70       	andi	r25, 0x00	; 0
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	d9 f4       	brne	.+54     	; 0x152 <main+0xd0>
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	89 30       	cpi	r24, 0x09	; 9
 120:	c0 f4       	brcc	.+48     	; 0x152 <main+0xd0>
			{
				PORTB = SegChde[++counter];
 122:	a8 e3       	ldi	r26, 0x38	; 56
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	ce 01       	movw	r24, r28
 134:	02 96       	adiw	r24, 0x02	; 2
 136:	fc 01       	movw	r30, r24
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	80 81       	ld	r24, Z
 13e:	8c 93       	st	X, r24
				while(GET_BIT(~PINA, 0));
 140:	e9 e3       	ldi	r30, 0x39	; 57
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	90 70       	andi	r25, 0x00	; 0
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	b9 f3       	breq	.-18     	; 0x140 <main+0xbe>
			}
			if(GET_BIT(~PINA, 1) && counter > 0) // switch 2 is on
 152:	e9 e3       	ldi	r30, 0x39	; 57
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	82 70       	andi	r24, 0x02	; 2
 15e:	90 70       	andi	r25, 0x00	; 0
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	99 f6       	brne	.-90     	; 0x10a <main+0x88>
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	88 23       	and	r24, r24
 168:	81 f2       	breq	.-96     	; 0x10a <main+0x88>
			{
				PORTB = SegChde[--counter];
 16a:	a8 e3       	ldi	r26, 0x38	; 56
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	81 50       	subi	r24, 0x01	; 1
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	ce 01       	movw	r24, r28
 17c:	02 96       	adiw	r24, 0x02	; 2
 17e:	fc 01       	movw	r30, r24
 180:	e2 0f       	add	r30, r18
 182:	f3 1f       	adc	r31, r19
 184:	80 81       	ld	r24, Z
 186:	8c 93       	st	X, r24
				while(GET_BIT(~PINA, 1));
 188:	e9 e3       	ldi	r30, 0x39	; 57
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	82 70       	andi	r24, 0x02	; 2
 194:	90 70       	andi	r25, 0x00	; 0
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	b9 f3       	breq	.-18     	; 0x188 <main+0x106>
 19a:	b7 cf       	rjmp	.-146    	; 0x10a <main+0x88>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
